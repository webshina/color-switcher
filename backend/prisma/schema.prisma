// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MailTemplate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  title     String
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User model
model User {
  id                    Int       @id @default(autoincrement())
  discordId             String    @unique
  discordAccessToken    String?   @unique
  discordRefreshToken   String?   @unique
  discordTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Guilds
  guilds Guild[]

  // GuildMembers
  guildMembers GuildMember[]
}

// Guild model
model Guild {
  id                       Int      @id @default(autoincrement())
  discordId                String   @unique
  name                     String
  description              String?  @db.LongText
  shareMessage             String?  @db.LongText
  autoGenerateDescription  Boolean  @default(true)
  autoGenerateTags         Boolean  @default(true)
  autoGenerateShareMessage Boolean  @default(true)
  coverImage               String?
  isPrivate                Boolean
  iconURL                  String?
  inviteURL                String?
  createdByUser            User?    @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId          Int?
  availableChannelCnt      Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Members
  members GuildMember[]

  // Roles
  roles GuildRole[]

  // Tags
  tags GuildTag[]

  // Channels
  channels          Channel[]
  channelCategories ChannelCategory[]

  guildBatches GuildBatch[]

  // Posts
  posts GuildPost[]
}

// GuildMember model
model GuildMember {
  id             Int       @id @default(autoincrement())
  discordId      String
  guild          Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId        Int
  User           User?     @relation(fields: [userId], references: [id])
  userId         Int?
  name           String
  permissions    BigInt
  displayName    String?
  avatarURL      String?
  messagesPerDay Float?
  activityScore  Int?
  joinedAt       DateTime?
  autoGenerate   Boolean   @default(true)
  order          Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Roles
  roleRelations GuildMemberRoleRelation[]

  // Posts
  postRelations GuildMemberPostRelation[]

  @@unique([guildId, discordId])
}

enum PostName {
  MANAGER
}

model GuildPost {
  id        Int      @id @default(autoincrement())
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   Int
  name      PostName
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post Relations
  postRelations GuildMemberPostRelation[]

  @@unique([guildId, name])
}

model GuildMemberPostRelation {
  id            Int         @id @default(autoincrement())
  guildMember   GuildMember @relation(fields: [guildMemberId], references: [id], onDelete: Cascade)
  guildMemberId Int
  guildPost     GuildPost   @relation(fields: [guildPostId], references: [id], onDelete: Cascade)
  guildPostId   Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([guildMemberId, guildPostId])
}

// Guild Role model
model GuildRole {
  id          Int      @id @default(autoincrement())
  discordId   String   @unique
  guild       Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId     Int
  name        String
  permissions BigInt
  hexColor    String
  position    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Roles
  roleRelations GuildMemberRoleRelation[]
}

// Guild Member Role Relation model
model GuildMemberRoleRelation {
  id            Int         @id @default(autoincrement())
  guildMember   GuildMember @relation(fields: [guildMemberId], references: [id], onDelete: Cascade)
  guildMemberId Int
  guildRole     GuildRole   @relation(fields: [guildRoleId], references: [id], onDelete: Cascade)
  guildRoleId   Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([guildMemberId, guildRoleId])
}

// GuildTags model
model GuildTag {
  id        Int      @id @default(autoincrement())
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Channel model
model Channel {
  id                      Int              @id @default(autoincrement())
  discordId               String
  name                    String
  topic                   String?
  image                   String?
  guild                   Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId                 Int
  category                ChannelCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId              Int?
  messagesPerDay          Float?
  activityScore           Int?
  showConversationSummary Boolean          @default(true)
  order                   Int              @default(0)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  // Channel Summaries
  channelSummaries ChannelSummary[]

  // Messages
  messages Message[]

  @@unique([guildId, discordId])
}

// Channel Summary model
model ChannelSummary {
  id        Int      @id @default(autoincrement())
  channelId Int
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Channel Category model
model ChannelCategory {
  id        Int      @id @default(autoincrement())
  discordId String
  name      String
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   Int
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Channels
  channels Channel[]

  @@unique([guildId, discordId])
}

// Message model
model Message {
  id              Int        @id @default(autoincrement())
  discordId       String
  content         String     @db.LongText
  authorDiscordId String
  channel         Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId       Int
  batchId         Int
  batch           GuildBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@unique([channelId, discordId])
}

model GuildBatch {
  id                                     Int      @id @default(autoincrement())
  guild                                  Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId                                Int
  isChannelGenerationCompleted           Boolean  @default(false)
  totalChannelCnt                        Int?
  completedChannelCnt                    Int?
  isGuildDescriptionGenerationCompleted  Boolean  @default(false)
  isGuildShareMessageGenerationCompleted Boolean  @default(false)
  isGuildTagGenerationCompleted          Boolean  @default(false)
  isGuildImageGenerationCompleted        Boolean  @default(false)
  isGuildMemberGenerationCompleted       Boolean  @default(false)
  createdAt                              DateTime @default(now())
  updatedAt                              DateTime @updatedAt

  // Messages
  messages Message[]
}
