// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MailTemplate {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  title     String
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User model
model User {
  id                    Int       @id @default(autoincrement())
  discordId             String    @unique
  discordAccessToken    String?   @unique
  discordRefreshToken   String?   @unique
  discordTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Guilds
  guilds Guild[]

  // GuildMembers
  guildMembers GuildMember[]
}

// Guild model
model Guild {
  id                  Int       @id @default(autoincrement())
  discordId           String    @unique
  name                String
  description         String?   @db.LongText
  coverImage          String?
  isPrivate           Boolean
  inProgress          Boolean
  iconURL             String?
  createdByUser       User?     @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId     Int?
  availableChannelCnt Int?
  lastSyncedAt        DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Members
  members GuildMember[]

  // Tags
  tags GuildTag[]

  // Channels
  channels        Channel[]
  ChannelCategory ChannelCategory[]
}

// GuildMember model
model GuildMember {
  id             Int      @id @default(autoincrement())
  discordId      String   @unique
  guild          Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId        Int
  guildDiscordId String
  User           User?    @relation(fields: [userId], references: [id])
  userId         Int?
  isOwner        Boolean
  permissions    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// GuildTags model
model GuildTag {
  id        Int      @id @default(autoincrement())
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Channel model
model Channel {
  id             Int              @id @default(autoincrement())
  discordId      String
  name           String
  topic          String?
  image          String?
  guild          Guild            @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId        Int
  category       ChannelCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId     Int?
  messagesPerDay Float?
  activityScore  Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Channel Summaries
  channelSummaries ChannelSummary[]

  // Messages
  messages Message[]

  @@unique([guildId, discordId])
}

// Channel Summary model
model ChannelSummary {
  id        Int      @id @default(autoincrement())
  channelId Int
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Channel Category model
model ChannelCategory {
  id        Int      @id @default(autoincrement())
  discordId String
  name      String
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Channels
  channels Channel[]

  @@unique([guildId, discordId])
}

// Message model
model Message {
  id              Int      @id @default(autoincrement())
  discordId       String
  content         String   @db.LongText
  authorDiscordId String
  channel         Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId       Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([channelId, discordId])
}
